
/**
 * IP Spoofing Simulation for DNS Amplification Attack - Educational Purpose Only
 * 
 * C·∫¢NH B√ÅO QUAN TR·ªåNG:
 * - M√£ n√†y ch·ªâ d√†nh cho m·ª•c ƒë√≠ch gi√°o d·ª•c v√† nghi√™n c·ª©u
 * - KH√îNG th·ªÉ v√† KH√îNG n√™n th·ª±c hi·ªán IP spoofing th·ª±c t·∫ø
 * - JavaScript/Node.js th√¥ng th∆∞·ªùng KH√îNG TH·ªÇ th·ª±c hi·ªán IP spoofing th·ª±c t·∫ø
 * - ƒê√¢y ch·ªâ l√† m√¥ ph·ªèng ƒë·ªÉ hi·ªÉu nguy√™n l√Ω ho·∫°t ƒë·ªông
 * 
 * Trong th·ª±c t·∫ø, IP spoofing y√™u c·∫ßu:
 * 1. Quy·ªÅn truy c·∫≠p raw socket (root)
 * 2. H·ªó tr·ª£ ·ªü m·ª©c kernel v√† m·∫°ng
 * 3. C√°c th∆∞ vi·ªán ƒë·∫∑c bi·ªát ho·∫∑c c√°c ng√¥n ng·ªØ c·∫•p th·∫•p h∆°n
 */

const dgram = require('dgram');
const dnsPacket = require('dns-packet');

class IPSpoofingSimulator {
    constructor() {
        this.config = {
            targetIP: '192.168.1.100', // IP n·∫°n nh√¢n (gi·∫£ ƒë·ªãnh)
            targetPort: 53,
            dnsResolvers: [
                '8.8.8.8',
                '1.1.1.1'
            ],
            dnsPort: 53
        };
    }

    /**
     * M√¥ ph·ªèng IP spoofing - CH·ªà M√î PH·ªéNG
     * Node.js kh√¥ng cho ph√©p thay ƒë·ªïi ƒë·ªãa ch·ªâ IP ngu·ªìn th·ª±c t·∫ø
     * ƒê√¢y ch·ªâ l√† m√¥ ph·ªèng nguy√™n t·∫Øc ho·∫°t ƒë·ªông
     */
    simulateSpoofedDNSQuery(domain = 'example.com') {
        console.log('\nüé≠ M√î PH·ªéNG IP SPOOFING TRONG DNS AMPLIFICATION ATTACK');
        console.log('‚ö†Ô∏è  L∆ØU √ù: ƒê√¢y ch·ªâ l√† m√¥ ph·ªèng gi·∫£ ƒë·ªãnh - kh√¥ng ph·∫£i IP spoofing th·ª±c t·∫ø\n');

        // T·∫°o DNS query v·ªõi lo·∫°i ANY
        const query = {
            type: 'query',
            id: Math.floor(Math.random() * 65535),
            flags: dnsPacket.RECURSION_DESIRED,
            questions: [{
                type: 'ANY',
                name: domain,
                class: 'IN'
            }]
        };

        const queryBuffer = dnsPacket.encode(query);

        console.log(`üì§ T·∫†O DNS QUERY (${queryBuffer.length} bytes):`);
        console.log('   ‚Ä¢ Lo·∫°i truy v·∫•n: ANY (y√™u c·∫ßu t·∫•t c·∫£ b·∫£n ghi)');
        console.log(`   ‚Ä¢ Domain: ${domain}`);
        console.log(`   ‚Ä¢ Query ID: ${query.id}`);
        console.log('   ‚Ä¢ Flags: RECURSION_DESIRED\n');

        console.log('üéØ IP SPOOFING SIMULATION:');
        console.log(`   ‚Ä¢ IP ngu·ªìn th·ª±c t·∫ø: [IP c·ªßa botnet/attacker]`);
        console.log(`   ‚Ä¢ IP ngu·ªìn gi·∫£ m·∫°o: ${this.config.targetIP} (n·∫°n nh√¢n)\n`);

        console.log('üì¨ G·ª¨I QUERY T·ªöI DNS RESOLVERS:');
        this.config.dnsResolvers.forEach(resolver => {
            console.log(`   ‚Ä¢ Resolver: ${resolver}:${this.config.dnsPort}`);
            console.log(`   ‚Ä¢ IP ngu·ªìn ƒë√£ gi·∫£ m·∫°o: ${this.config.targetIP}`);
            console.log(`   ‚Ä¢ K√≠ch th∆∞·ªõc g√≥i tin: ${queryBuffer.length} bytes\n`);
        });

        // M√¥ ph·ªèng k·∫øt qu·∫£ khu·∫øch ƒë·∫°i
        const amplificationFactor = Math.floor(Math.random() * 30) + 20; // Gi·∫£ ƒë·ªãnh 20-50x
        const responseSize = queryBuffer.length * amplificationFactor;

        console.log('üì• M√î PH·ªéNG PH·∫¢N H·ªíI DNS:');
        this.config.dnsResolvers.forEach(resolver => {
            console.log(`   ‚Ä¢ T·ª´ resolver: ${resolver}:${this.config.dnsPort}`);
            console.log(`   ‚Ä¢ ƒê·∫øn: ${this.config.targetIP}:${this.config.targetPort} (n·∫°n nh√¢n)`);
            console.log(`   ‚Ä¢ K√≠ch th∆∞·ªõc ph·∫£n h·ªìi: ${responseSize} bytes`);
            console.log(`   ‚Ä¢ H·ªá s·ªë khu·∫øch ƒë·∫°i: ${amplificationFactor}x\n`);
        });

        console.log('‚ö†Ô∏è  TH·ª∞C T·∫æ HO·∫†T ƒê·ªòNG:');
        console.log('   1. K·∫ª t·∫•n c√¥ng t·∫°o g√≥i tin UDP ch·ª©a DNS query');
        console.log('   2. S·ª≠ d·ª•ng raw socket ƒë·ªÉ ƒë·∫∑t ƒë·ªãa ch·ªâ IP ngu·ªìn th√†nh IP n·∫°n nh√¢n');
        console.log('   3. DNS resolver ph·∫£n h·ªìi v·ªÅ IP ngu·ªìn (IP n·∫°n nh√¢n)');
        console.log('   4. N·∫°n nh√¢n nh·∫≠n l∆∞u l∆∞·ª£ng ph·∫£n h·ªìi kh√¥ng mong mu·ªën\n');

        console.log('‚õî GI·ªöI H·∫†N K·ª∏ THU·∫¨T:');
        console.log('   ‚Ä¢ Node.js ti√™u chu·∫©n KH√îNG TH·ªÇ th·ª±c hi·ªán IP spoofing th·ª±c t·∫ø');
        console.log('   ‚Ä¢ C·∫ßn raw socket v·ªõi quy·ªÅn root v√† h·ªó tr·ª£ kernel');
        console.log('   ‚Ä¢ Nhi·ªÅu ISP v√† routers hi·ªán ƒë·∫°i ƒë√£ ngƒÉn ch·∫∑n IP spoofing (BCP 38)');
        console.log('   ‚Ä¢ M√£ n√†y ch·ªâ m√¥ ph·ªèng nguy√™n l√Ω, kh√¥ng ph·∫£i tri·ªÉn khai th·ª±c t·∫ø\n');
    }

    /**
     * Hi·ªÉn th·ªã gi·∫£i th√≠ch k·ªπ thu·∫≠t v·ªÅ IP spoofing
     */
    explainIPSpoofing() {
        console.log('\nüìö GI·∫¢I TH√çCH K·ª∏ THU·∫¨T V·ªÄ IP SPOOFING:\n');

        console.log('üîç IP SPOOFING L√Ä G√å?');
        console.log('   ‚Ä¢ K·ªπ thu·∫≠t gi·∫£ m·∫°o ƒë·ªãa ch·ªâ IP ngu·ªìn trong g√≥i tin m·∫°ng');
        console.log('   ‚Ä¢ Cho ph√©p k·∫ª t·∫•n c√¥ng gi·∫•u danh t√≠nh th·∫≠t');
        console.log('   ‚Ä¢ ƒê∆∞·ª£c s·ª≠ d·ª•ng trong nhi·ªÅu lo·∫°i t·∫•n c√¥ng (DDoS, MITM, ...)\n');

        console.log('‚öôÔ∏è C∆† CH·∫æ HO·∫†T ƒê·ªòNG:');
        console.log('   ‚Ä¢ T·∫°o g√≥i tin IP ·ªü m·ª©c raw socket');
        console.log('   ‚Ä¢ Thay ƒë·ªïi tr∆∞·ªùng Source IP trong IP header');
        console.log('   ‚Ä¢ G·ª≠i g√≥i tin v·ªõi ƒë·ªãa ch·ªâ ngu·ªìn ƒë√£ b·ªã thay ƒë·ªïi\n');

        console.log('üõ†Ô∏è Y√äU C·∫¶U K·ª∏ THU·∫¨T:');
        console.log('   ‚Ä¢ Quy·ªÅn truy c·∫≠p raw socket (th∆∞·ªùng y√™u c·∫ßu quy·ªÅn root/admin)');
        console.log('   ‚Ä¢ H·ªó tr·ª£ t·ª´ kernel c·ªßa h·ªá ƒëi·ªÅu h√†nh');
        console.log('   ‚Ä¢ M·∫°ng kh√¥ng th·ª±c hi·ªán ki·ªÉm tra x√°c th·ª±c ƒë·ªãa ch·ªâ ngu·ªìn\n');

        console.log('üí° V√ç D·ª§ M√É TH·ª∞C T·∫æ (PSEUDOCODE):');
        console.log('   socket = create_raw_socket(AF_INET, SOCK_RAW, IPPROTO_RAW);');
        console.log('   packet = create_ip_packet();');
        console.log('   packet.source_ip = spoofed_ip; // ƒê·ªãa ch·ªâ IP gi·∫£ m·∫°o');
        console.log('   packet.dest_ip = target_ip;');
        console.log('   sendto(socket, packet, ...);\n');

        console.log('üîí BI·ªÜN PH√ÅP PH√íNG CH·ªêNG:');
        console.log('   ‚Ä¢ Ingress/Egress filtering (BCP 38)');
        console.log('   ‚Ä¢ Source Address Validation');
        console.log('   ‚Ä¢ Reverse Path Forwarding');
        console.log('   ‚Ä¢ Packet filtering t·∫°i firewall\n');
    }
}

// Xu·∫•t module
module.exports = {
    IPSpoofingSimulator
};

// Ch·∫°y m√¥ ph·ªèng n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    console.log('üéì IP SPOOFING EDUCATIONAL SIMULATOR');
    console.log('üìñ M·ª•c ƒë√≠ch: H·ªçc t·∫≠p v√† nghi√™n c·ª©u b·∫£o m·∫≠t m·∫°ng\n');

    const simulator = new IPSpoofingSimulator();
    simulator.explainIPSpoofing();
    simulator.simulateSpoofedDNSQuery('example.com');
}
